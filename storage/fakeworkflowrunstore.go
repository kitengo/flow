// Code generated by mockery v1.0.0. DO NOT EDIT.

package storage

import (

	mock "github.com/stretchr/testify/mock"

	"flow/models"
)

// FakeWorkflowRunStore is an autogenerated mock type for the FakeWorkflowRunStore type
type FakeWorkflowRunStore struct {
	mock.Mock
}

// Get provides a mock function with given fields: wfRunID
func (_m *FakeWorkflowRunStore) Get(wfRunID string) (models.WorkflowRun, error) {
	ret := _m.Called(wfRunID)

	var r0 models.WorkflowRun
	if rf, ok := ret.Get(0).(func(string) models.WorkflowRun); ok {
		r0 = rf(wfRunID)
	} else {
		r0 = ret.Get(0).(models.WorkflowRun)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(wfRunID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: workflowRun
func (_m *FakeWorkflowRunStore) Store(workflowRun models.WorkflowRun) error {
	ret := _m.Called(workflowRun)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.WorkflowRun) error); ok {
		r0 = rf(workflowRun)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: workflowRun
func (_m *FakeWorkflowRunStore) Update(workflowRun models.WorkflowRun) (models.WorkflowRun, error) {
	ret := _m.Called(workflowRun)

	var r0 models.WorkflowRun
	if rf, ok := ret.Get(0).(func(models.WorkflowRun) models.WorkflowRun); ok {
		r0 = rf(workflowRun)
	} else {
		r0 = ret.Get(0).(models.WorkflowRun)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.WorkflowRun) error); ok {
		r1 = rf(workflowRun)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
