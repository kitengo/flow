// Code generated by mockery v1.0.0. DO NOT EDIT.

package storage

import (
	mock "github.com/stretchr/testify/mock"

	"flow/models"
)

// TaskRunStore is an autogenerated mock type for the TaskRunStore type
type FakeTaskRunStore struct {
	mock.Mock
}

// Get provides a mock function with given fields: taskRunID
func (_m *FakeTaskRunStore) Get(taskRunID string) (models.TaskRun, error) {
	ret := _m.Called(taskRunID)

	var r0 models.TaskRun
	if rf, ok := ret.Get(0).(func(string) models.TaskRun); ok {
		r0 = rf(taskRunID)
	} else {
		r0 = ret.Get(0).(models.TaskRun)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(taskRunID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: taskRun
func (_m *FakeTaskRunStore) Store(taskRun models.TaskRun) error {
	ret := _m.Called(taskRun)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.TaskRun) error); ok {
		r0 = rf(taskRun)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: taskRun
func (_m *FakeTaskRunStore) Update(taskRun models.TaskRun) (models.TaskRun, error) {
	ret := _m.Called(taskRun)

	var r0 models.TaskRun
	if rf, ok := ret.Get(0).(func(models.TaskRun) models.TaskRun); ok {
		r0 = rf(taskRun)
	} else {
		r0 = ret.Get(0).(models.TaskRun)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.TaskRun) error); ok {
		r1 = rf(taskRun)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNextTaskRunIDs provides a mock function with given fields: taskRunIDs
func (_m *FakeTaskRunStore) GetNextTaskRunIDs(taskRunIDs []string) ([]string, error) {
	ret := _m.Called(taskRunIDs)

	var r0 []string
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(taskRunIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(taskRunIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
